@startuml
class FarmFactory implements OwnableUpgradeable, Initializable {
    + address feeReceiver
    + address feeToken
    + uint256 feeAmount
    + address[] farms
    + string[] deployerList
    + map[address -> bool] deployerRegistered
    + map[address -> bool] farmRegistered

    + registerFarm(address _farm, address _creator, bool _collectFee)
    + getFarmDeployerList()
    + getFarmList()
    # registerFarmDeployer(address _deployer)
    # removeDeployer(uint16 _id)
    - _collectFees()
    - _isNonZeroAddr(address _addr)
}

class CloneFactory {
    + clone()
}

class Initializable {}
class Ownable {}
class OwnableUpgradeable {}
interface IERC721Receiver {}


struct PoolData {
    address tokenA;
    address tokenB;
    uint24 feeTier;
    int24 tickLowerAllowed;
    int24 tickUpperAllowed;
}

struct RewardTokenData {
    address token;
    address tknManager;
}

struct FarmData {
    address farmAdmin;
    uint256 farmStartTime;
    uint256 cooldownPeriod;
    UniswapPoolData uniswapPoolData;
    RewardTokenData[] rewardData;
}

class FarmDeployer {

    + address factory
    + address implementation

    + createFarm(FarmData _data)
    - _validateToken(address _token)
    - _isNonZeroAddr(address _addr)
}

class Farm implements Initializable, Ownable, IERC721Receiver{
}


FarmData -- PoolData
FarmData -- RewardTokenData
FarmFactory -- FarmDeployer
CloneFactory -- FarmDeployer
FarmDeployer <-- FarmData
FarmDeployer "1"-->"many" Farm : clones


' class SushiswapFarmDeployer implements IFarmDeployer {
'     + address factory
'     + address implementation

'     + deploy(bytes _data)
'     + encodeDeploymentParam(SushiswapFarmData)
'     - _validateToken(address _token)
'     - _isNonZeroAddr(address _addr)
' }

' class SushiswapFarm implements Initializable, Ownable, IERC721Receiver{
' }

' CloneFactory -- SushiswapFarmDeployer
' SushiswapFarmDeployer -- SushiswapFarm

@enduml