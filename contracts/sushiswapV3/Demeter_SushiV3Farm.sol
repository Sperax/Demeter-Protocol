// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//
//@@@@@@@@&....(@@@@@@@@@@@@@..../@@@@@@@@@//
//@@@@@@........../@@@@@@@........../@@@@@@//
//@@@@@............(@@@@@............(@@@@@//
//@@@@@(............@@@@@(...........&@@@@@//
//@@@@@@@...........&@@@@@@.........@@@@@@@//
//@@@@@@@@@@@@@@%..../@@@@@@@@@@@@@@@@@@@@@//
//@@@@@@@@@@@@@@@@@@@...@@@@@@@@@@@@@@@@@@@//
//@@@@@@@@@@@@@@@@@@@@@......(&@@@@@@@@@@@@//
//@@@@@@#.........@@@@@@#...........@@@@@@@//
//@@@@@/...........%@@@@@............%@@@@@//
//@@@@@............#@@@@@............%@@@@@//
//@@@@@@..........#@@@@@@@/.........#@@@@@@//
//@@@@@@@@@&/.(@@@@@@@@@@@@@@&/.(&@@@@@@@@@//
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//

import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import {INonfungiblePositionManager as INFPM, IUniswapV3Factory, IUniswapV3TickSpacing, CollectParams} from "../uniswapV3/interfaces/UniswapV3.sol";
import {PositionValue} from "../uniswapV3/libraries/PositionValue.sol";
import {BaseFarm, RewardTokenData} from "../BaseFarm.sol";

// Defines the sushiswap pool init data for constructor.
// tokenA - Address of tokenA
// tokenB - Address of tokenB
// feeTier - Fee tier for the sushiswap pool
// tickLowerAllowed - Lower bound of the tick range for farm
// tickUpperAllowed - Upper bound of the tick range for farm
struct SushiswapPoolData {
    address tokenA;
    address tokenB;
    uint24 feeTier;
    int24 tickLowerAllowed;
    int24 tickUpperAllowed;
}

contract Demeter_SushiV3Farm is BaseFarm, IERC721Receiver {
    // constants
    string public constant FARM_ID = "Demeter_SushiV3_v3";
    address public constant NFPM = 0xF0cBce1942A68BEB3d1b73F0dd86C8DCc363eF49;
    address public constant SUSHIV3_FACTORY =
        0x1af415a1EbA07a4986a52B6f2e7dE7003D82231e;

    // SushiswapV3 params
    int24 public tickLowerAllowed;
    int24 public tickUpperAllowed;
    address public sushiswapPool;

    event PoolFeeCollected(
        address indexed recipient,
        uint256 tokenId,
        uint256 amt0Recv,
        uint256 amt1Recv
    );

    // Custom Errors
    error InvalidSushiswapPoolConfig();
    error NotASushiV3NFT();
    error NoData();
    error NoFeeToClaim();
    error IncorrectPoolToken();
    error IncorrectTickRange();
    error InvalidTickRange();

    /// @notice constructor
    /// @param _farmStartTime - time of farm start
    /// @param _cooldownPeriod - cooldown period for locked deposits in days
    /// @dev _cooldownPeriod = 0 Disables lockup functionality for the farm.
    /// @param _sushiswapPoolData - init data for SushiswapV3 pool
    /// @param _rwdTokenData - init data for reward tokens
    function initialize(
        uint256 _farmStartTime,
        uint256 _cooldownPeriod,
        SushiswapPoolData memory _sushiswapPoolData,
        RewardTokenData[] memory _rwdTokenData
    ) external initializer {
        // initialize sushiswap related data
        sushiswapPool = IUniswapV3Factory(SUSHIV3_FACTORY).getPool(
            _sushiswapPoolData.tokenB,
            _sushiswapPoolData.tokenA,
            _sushiswapPoolData.feeTier
        );
        if (sushiswapPool == address(0)) {
            revert InvalidSushiswapPoolConfig();
        }
        _validateTickRange(
            _sushiswapPoolData.tickLowerAllowed,
            _sushiswapPoolData.tickUpperAllowed
        );
        tickLowerAllowed = _sushiswapPoolData.tickLowerAllowed;
        tickUpperAllowed = _sushiswapPoolData.tickUpperAllowed;

        _setupFarm(_farmStartTime, _cooldownPeriod, _rwdTokenData);
    }

    /// @notice Function is called when user transfers the NFT to the contract.
    /// @param _from The address of the owner.
    /// @param _tokenId nft Id generated by sushiswap v3.
    /// @param _data The data should be the lockup flag (bool).
    function onERC721Received(
        address, // unused variable. not named
        address _from,
        uint256 _tokenId,
        bytes calldata _data
    ) external override returns (bytes4) {
        if (msg.sender != NFPM) {
            revert NotASushiV3NFT();
        }
        if (_data.length == 0) {
            revert NoData();
        }
        uint256 liquidity = _getLiquidity(_tokenId);
        // Validate the position and get the liquidity

        _deposit(_from, abi.decode(_data, (bool)), _tokenId, liquidity);
        return this.onERC721Received.selector;
    }

    /// @notice Function to lock a staked deposit
    /// @param _depositId The id of the deposit to be locked
    /// @dev _depositId is corresponding to the user's deposit
    function initiateCooldown(uint256 _depositId) external nonReentrant {
        _initiateCooldown(_depositId);
    }

    /// @notice Function to withdraw a deposit from the farm.
    /// @param _depositId The id of the deposit to be withdrawn
    function withdraw(uint256 _depositId) external nonReentrant {
        _isValidDeposit(msg.sender, _depositId);
        Deposit memory userDeposit = deposits[msg.sender][_depositId];

        _withdraw(msg.sender, _depositId, userDeposit);
        // Transfer the nft back to the user.
        INFPM(NFPM).safeTransferFrom(
            address(this),
            msg.sender,
            userDeposit.tokenId
        );
    }

    /// @notice Claim sushiswap pool fee for a deposit.
    /// @dev Only the deposit owner can claim the fee.
    /// @param _depositId Id of the deposit
    function claimSushiswapFee(uint256 _depositId) external nonReentrant {
        _farmNotClosed();
        _isValidDeposit(msg.sender, _depositId);
        uint256 tokenId = deposits[msg.sender][_depositId].tokenId;

        INFPM pm = INFPM(NFPM);
        (uint256 amt0, uint256 amt1) = PositionValue.fees(pm, tokenId);
        if (amt0 == 0 && amt1 == 0) {
            revert NoFeeToClaim();
        }
        (uint256 amt0Recv, uint256 amt1Recv) = pm.collect(
            CollectParams({
                tokenId: tokenId,
                recipient: msg.sender,
                amount0Max: uint128(amt0),
                amount1Max: uint128(amt1)
            })
        );
        emit PoolFeeCollected(msg.sender, tokenId, amt0Recv, amt1Recv);
    }

    /// @notice Get the accrued sushiswap fee for a deposit.
    /// @return amount0 The amount of token0
    /// @return amount1 The amount of token1
    function computeSushiswapFee(uint256 _tokenId)
        external
        view
        returns (uint256 amount0, uint256 amount1)
    {
        // Validate token.
        _getLiquidity(_tokenId);
        return PositionValue.fees(INFPM(NFPM), _tokenId);
    }

    /// @notice Validate the position for the pool and get Liquidity
    /// @param _tokenId The tokenId of the position
    /// @dev the position must adhere to the price ranges
    /// @dev Only allow specific pool token to be staked.
    function _getLiquidity(uint256 _tokenId) private view returns (uint256) {
        /// @dev Get the info of the required token
        (
            ,
            ,
            address token0,
            address token1,
            uint24 fee,
            int24 tickLower,
            int24 tickUpper,
            uint128 liquidity,
            ,
            ,
            ,

        ) = INFPM(NFPM).positions(_tokenId);

        /// @dev Check if the token belongs to correct pool

        if (
            sushiswapPool !=
            IUniswapV3Factory(SUSHIV3_FACTORY).getPool(token0, token1, fee)
        ) {
            revert IncorrectPoolToken();
        }

        /// @dev Check if the token adheres to the tick range
        if (tickLower != tickLowerAllowed || tickUpper != tickUpperAllowed) {
            revert IncorrectTickRange();
        }

        return uint256(liquidity);
    }

    function _validateTickRange(int24 _tickLower, int24 _tickUpper)
        private
        view
    {
        int24 spacing = IUniswapV3TickSpacing(sushiswapPool).tickSpacing();
        if (
            !(_tickLower < _tickUpper &&
                _tickLower >= -887272 &&
                _tickLower % spacing == 0 &&
                _tickUpper <= 887272 &&
                _tickUpper % spacing == 0)
        ) {
            revert InvalidTickRange();
        }
    }
}
